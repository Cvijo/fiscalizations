using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Security;
using System.Text.RegularExpressions;
using FuncSharp;

namespace Mews.Fiscalization.Core.Model
{
    public static class Countries
    {
        static Countries()
        {
            All = new List<Country>
            {
                NonEuropean("AD"),
                NonEuropean("AE"),
                NonEuropean("AF"),
                NonEuropean("AG"),
                NonEuropean("AI"),
                NonEuropean("AL"),
                NonEuropean("AM"),
                NonEuropean("AN"),
                NonEuropean("AO"),
                NonEuropean("AQ"),
                NonEuropean("AR"),
                NonEuropean("AS"),
                European("AT", "^(AT)?U[0-9]{8}$"),
                NonEuropean("AU"),
                NonEuropean("AW"),
                NonEuropean("AX"),
                NonEuropean("AZ"),
                NonEuropean("BA"),
                NonEuropean("BB"),
                NonEuropean("BD"),
                European("BE", "^(BE)?0[0-9]{9}$"),
                NonEuropean("BF"),
                European("BG", "^(BG)?[0-9]{9,10}$"),
                NonEuropean("BH"),
                NonEuropean("BI"),
                NonEuropean("BJ"),
                NonEuropean("BL"),
                NonEuropean("BM"),
                NonEuropean("BN"),
                NonEuropean("BO"),
                NonEuropean("BR"),
                NonEuropean("BS"),
                NonEuropean("BT"),
                NonEuropean("BV"),
                NonEuropean("BW"),
                NonEuropean("BY"),
                NonEuropean("BZ"),
                NonEuropean("CA"),
                NonEuropean("CC"),
                NonEuropean("CD"),
                NonEuropean("CF"),
                NonEuropean("CG"),
                NonEuropean("CH"),
                NonEuropean("CI"),
                NonEuropean("CK"),
                NonEuropean("CL"),
                NonEuropean("CM"),
                NonEuropean("CN"),
                NonEuropean("CO"),
                NonEuropean("CR"),
                NonEuropean("CU"),
                NonEuropean("CV"),
                NonEuropean("CX"),
                European("CY", "^(CY)?[0-9]{8}L$"),
                European("CZ", "^(CZ)?[0-9]{8,10}$"),
                European("DE", "^(DE)?[0-9]{9}$"),
                NonEuropean("DJ"),
                European("DK", "^(DK)?[0-9]{8}$"),
                NonEuropean("DM"),
                NonEuropean("DO"),
                NonEuropean("DZ"),
                NonEuropean("EC"),
                European("EE", "^(EE)?[0-9]{9}$"),
                NonEuropean("EG"),
                NonEuropean("EH"),
                NonEuropean("ER"),
                European("ES", "^(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]$"),
                NonEuropean("ET"),
                European("FI", "^(FI)?[0-9]{8}$"),
                NonEuropean("FJ"),
                NonEuropean("FK"),
                NonEuropean("FM"),
                NonEuropean("FO"),
                European("FR", "^(FR)?[0-9A-Z]{2}[0-9]{9}$"),
                NonEuropean("GA"),
                European("GB", "^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$"),
                NonEuropean("GD"),
                NonEuropean("GE"),
                NonEuropean("GF"),
                NonEuropean("GG"),
                NonEuropean("GH"),
                NonEuropean("GI"),
                NonEuropean("GL"),
                NonEuropean("GM"),
                NonEuropean("GN"),
                NonEuropean("GP"),
                NonEuropean("GQ"),
                European("GR", "^(EL|GR)?[0-9]{9}$"),
                NonEuropean("GS"),
                NonEuropean("GT"),
                NonEuropean("GU"),
                NonEuropean("GW"),
                NonEuropean("GY"),
                NonEuropean("HK"),
                NonEuropean("HM"),
                NonEuropean("HN"),
                NonEuropean("HR"),
                NonEuropean("HT"),
                European("HU", "^(HU)?[0-9]{8}$"),
                NonEuropean("ID"),
                European("IE", "^(IE)?[0-9]S[0-9]{5}L$"),
                NonEuropean("IL"),
                NonEuropean("IM"),
                NonEuropean("IN"),
                NonEuropean("IO"),
                NonEuropean("IQ"),
                NonEuropean("IR"),
                NonEuropean("IS"),
                European("IT", "^(IT)?[0-9]{11}$"),
                NonEuropean("JE"),
                NonEuropean("JM"),
                NonEuropean("JO"),
                NonEuropean("JP"),
                NonEuropean("KE"),
                NonEuropean("KG"),
                NonEuropean("KH"),
                NonEuropean("KI"),
                NonEuropean("KM"),
                NonEuropean("KN"),
                NonEuropean("KP"),
                NonEuropean("KR"),
                NonEuropean("KW"),
                NonEuropean("KY"),
                NonEuropean("KZ"),
                NonEuropean("LA"),
                NonEuropean("LB"),
                NonEuropean("LC"),
                NonEuropean("LI"),
                NonEuropean("LK"),
                NonEuropean("LR"),
                NonEuropean("LS"),
                European("LT", "^(LT)?([0-9]{9}|[0-9]{12})$"),
                European("LU", "^(LU)?[0-9]{8}$"),
                European("LV", "^(LV)?[0-9]{11}$"),
                NonEuropean("LY"),
                NonEuropean("MA"),
                NonEuropean("MC"),
                NonEuropean("MD"),
                NonEuropean("ME"),
                NonEuropean("MF"),
                NonEuropean("MG"),
                NonEuropean("MH"),
                NonEuropean("MK"),
                NonEuropean("ML"),
                NonEuropean("MM"),
                NonEuropean("MN"),
                NonEuropean("MO"),
                NonEuropean("MP"),
                NonEuropean("MQ"),
                NonEuropean("MR"),
                NonEuropean("MS"),
                European("MT", "^(MT)?[0-9]{8}$"),
                NonEuropean("MU"),
                NonEuropean("MV"),
                NonEuropean("MW"),
                NonEuropean("MX"),
                NonEuropean("MY"),
                NonEuropean("MZ"),
                NonEuropean("NA"),
                NonEuropean("NC"),
                NonEuropean("NE"),
                NonEuropean("NF"),
                NonEuropean("NG"),
                NonEuropean("NI"),
                European("NL", "^(NL)?[0-9]{9}B[0-9]{2}$"),
                NonEuropean("NO"),
                NonEuropean("NP"),
                NonEuropean("NR"),
                NonEuropean("NU"),
                NonEuropean("NZ"),
                NonEuropean("OM"),
                NonEuropean("PA"),
                NonEuropean("PE"),
                NonEuropean("PF"),
                NonEuropean("PG"),
                NonEuropean("PH"),
                NonEuropean("PK"),
                European("PL", "^(PL)?[0-9]{10}$"),
                NonEuropean("PM"),
                NonEuropean("PN"),
                NonEuropean("PR"),
                NonEuropean("PS"),
                European("PT", "^(PT)?[0-9]{9}$"),
                NonEuropean("PW"),
                NonEuropean("PY"),
                NonEuropean("QA"),
                NonEuropean("RE"),
                European("RO", "^(RO)?[0-9]{2,10}$"),
                NonEuropean("RS"),
                NonEuropean("RU"),
                NonEuropean("RW"),
                NonEuropean("SA"),
                NonEuropean("SB"),
                NonEuropean("SC"),
                NonEuropean("SD"),
                European("SE", "^(SE)?[0-9]{12}$"),
                NonEuropean("SG"),
                NonEuropean("SH"),
                European("SI", "^(SI)?[0-9]{8}$"),
                NonEuropean("SJ"),
                European("SK", "^(SK)?[0-9]{10}$"),
                NonEuropean("SL"),
                NonEuropean("SM"),
                NonEuropean("SN"),
                NonEuropean("SO"),
                NonEuropean("SR"),
                NonEuropean("ST"),
                NonEuropean("SV"),
                NonEuropean("SY"),
                NonEuropean("SZ"),
                NonEuropean("TC"),
                NonEuropean("TD"),
                NonEuropean("TF"),
                NonEuropean("TG"),
                NonEuropean("TH"),
                NonEuropean("TJ"),
                NonEuropean("TK"),
                NonEuropean("TL"),
                NonEuropean("TM"),
                NonEuropean("TN"),
                NonEuropean("TO"),
                NonEuropean("TR"),
                NonEuropean("TT"),
                NonEuropean("TV"),
                NonEuropean("TW"),
                NonEuropean("TZ"),
                NonEuropean("UA"),
                NonEuropean("UG"),
                NonEuropean("UM"),
                NonEuropean("US"),
                NonEuropean("UY"),
                NonEuropean("UZ"),
                NonEuropean("VA"),
                NonEuropean("VC"),
                NonEuropean("VE"),
                NonEuropean("VG"),
                NonEuropean("VI"),
                NonEuropean("VN"),
                NonEuropean("VU"),
                NonEuropean("WF"),
                NonEuropean("WS"),
                NonEuropean("YE"),
                NonEuropean("YT"),
                NonEuropean("ZA"),
                NonEuropean("ZM"),
                NonEuropean("ZW")
            };

            AllByCodes = All.ToDictionary(c => c.Alpha2Code);
            EuropeanUnionByCodes = All.Select(c => c.First).Flatten().ToDictionary(c => c.Alpha2Code);
        }

        public static IReadOnlyList<Country> All { get; }

        public static IReadOnlyDictionary<string, Country> AllByCodes { get; }

        public static IReadOnlyDictionary<string, EuropeanUnionCountry> EuropeanUnionByCodes { get; }

        public static IOption<Country> GetByCode(string code)
        {
            return AllByCodes.Get(code);
        }

        public static IOption<EuropeanUnionCountry> GetEuropeanUnionByCode(string code)
        {
            return EuropeanUnionByCodes.Get(code);
        }

        private static Country European(string alpha2Code, string taxpayerNumberPattern)
        {
            return new Country(new EuropeanUnionCountry(alpha2Code, new Regex(taxpayerNumberPattern)));
        }

        private static Country NonEuropean(string alpha2Code)
        {
            return new Country(new NonEuropeanUnionCountry(alpha2Code));
        }
    }
}
